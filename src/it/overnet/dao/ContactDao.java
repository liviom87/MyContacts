package it.overnet.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Logger;

import it.overnet.models.Contact;
import it.overnet.utilities.DBUtilityConnection;

public class ContactDao {

	private static final Logger logger = Logger.getLogger(ContactDao.class.getName());

	public static boolean createTable() throws Exception {

		Connection dbConnection = null;
		Statement statement = null;
		ResultSet resulSet = null;

		boolean check = false;
		String createTableSQL = "CREATE TABLE CONTACT "
				+ "(ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL, " + "NOME VARCHAR(255), "
				+ "COGNOME VARCHAR(255), " + "TEL VARCHAR(255), " + "MAIL VARCHAR(255), "
				+ "CONSTRAINT CONTACT_PK PRIMARY KEY ( ID ))";
		System.out.println(createTableSQL);
		try {
			dbConnection = DBUtilityConnection.getDBConnection();
			statement = dbConnection.createStatement();
			statement.execute(createTableSQL);
			resulSet = statement.executeQuery(createTableSQL);
			if (resulSet.next()) {
				check = true;
			}
			logger.info("Tabella CONTACT creata con successo");
		} catch (SQLException e) {
			logger.warning(e.getMessage());
		} finally {
			if (statement != null) {
				statement.close();
			}
			if (dbConnection != null) {
				dbConnection.close();
			}
		}
		return check;
	}

	public static boolean saveContact(Contact contatto) throws Exception {
		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;

		String insertTableSQL = "INSERT INTO CONTACT" + "(ID, NOME, COGNOME, TEL, MAIL) VALUES" + "(default,?,?,?,?)";

		ResultSet resulSet = null;
		Statement statement = null;
		boolean check = false;

		try {
			dbConnection = DBUtilityConnection.getDBConnection();
			preparedStatement = dbConnection.prepareStatement(insertTableSQL);
			statement = dbConnection.prepareStatement(insertTableSQL);
			preparedStatement.setString(1, contatto.getNome());
			preparedStatement.setString(2, contatto.getCognome());
			preparedStatement.setString(3, contatto.getTel());
			preparedStatement.setString(4, contatto.getMail());

			// execute insert SQL statement
			preparedStatement.executeUpdate();

			resulSet = statement.executeQuery(insertTableSQL);
			if (resulSet.next()) {
				check = true;
			}
			logger.info("Record inserito nella tabella REGISTRATION!");

		} catch (SQLException e) {

			logger.warning(e.getMessage());

		} finally {

			if (preparedStatement != null) {
				preparedStatement.close();
			}

			if (dbConnection != null) {
				dbConnection.close();
			}

		}
		return check;
	}

	public static ArrayList<Contact> findAllContacts() throws Exception {

		Connection dbConnection = null;
		Statement statement = null;
		String selectTableSQL = "SELECT * FROM CONTACT ";

		logger.info(selectTableSQL);
		ResultSet resulSet = null;

		ArrayList<Contact> listContact = new ArrayList<>();

		try {

			dbConnection = DBUtilityConnection.getDBConnection();
			statement = dbConnection.prepareStatement(selectTableSQL);

			resulSet = statement.executeQuery(selectTableSQL);

			while (resulSet.next()) {

				Contact contact = new Contact();
				contact.setId(resulSet.getInt("ID"));
				contact.setNome(resulSet.getString("NOME"));
				contact.setCognome(resulSet.getString("COGNOME"));
				contact.setTel(resulSet.getString("TEL"));
				contact.setMail(resulSet.getString("MAIL"));

				listContact.add(contact);

			}

		} catch (Exception e) {
			// TODO: handle exception
		}
		return listContact;

	}

	public static Contact getContactById(int contactId) {
		
		Connection dbConnection = null;
		Statement statement = null;
		String selectTableSQL = "SELECT * FROM CONTACT WHERE ID= '"+ contactId + "'";

		logger.info(selectTableSQL);
		ResultSet resulSet = null;
		Contact contact = new Contact();
		try {

			dbConnection = DBUtilityConnection.getDBConnection();
			statement = dbConnection.prepareStatement(selectTableSQL);
			resulSet = statement.executeQuery(selectTableSQL);
			while (resulSet.next()) {

				contact.setId(resulSet.getInt("ID"));
				contact.setNome(resulSet.getString("NOME"));
				contact.setCognome(resulSet.getString("COGNOME"));
				contact.setTel(resulSet.getString("TEL"));
				contact.setMail(resulSet.getString("MAIL"));


			}

		} catch (Exception e) {
			// TODO: handle exception
		}
		return contact;

		
		
	}

	public static Contact editContact(Contact contact) throws Exception {

		Connection dbConnection = null;
		PreparedStatement preparedStatement = null;

		String insertTableSQL = "UPDATE CONTACT SET NOME = ?, COGNOME = ?, TEL = ?, MAIL = ? WHERE ID = ?";

		try {
			dbConnection = DBUtilityConnection.getDBConnection();
			preparedStatement = dbConnection.prepareStatement(insertTableSQL);

			preparedStatement.setString(1, contact.getNome());
			preparedStatement.setString(2, contact.getCognome());
			preparedStatement.setString(3, contact.getTel());
			preparedStatement.setString(4, contact.getMail());
			preparedStatement.setInt(5, contact.getId());
			
			// execute insert SQL stetement
			preparedStatement.executeUpdate();

			System.out.println("Record aggiornato nella tabella CONTACT!");

		} catch (SQLException e) {

			System.err.println(e.getMessage());

		} finally {

			if (preparedStatement != null) {
				preparedStatement.close();
			}

			if (dbConnection != null) {
				dbConnection.close();
			}

		}
		return contact;

	}

}
